/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/preferences/notifications/snooze': {
    put: operations['updateSnoozeNotification']
  }
  '/preferences/notifications/details': {
    put: operations['updateNotificationDetails']
  }
  '/user/details': {
    get: operations['getShifts']
  }
  '/preferences/notifications': {
    get: operations['getNotificationPreferences']
  }
  '/preferences/notifications2': {
    get: operations['getNotificationPreferences2']
  }
  '/notifications': {
    get: operations['getNotifications']
  }
}

export interface components {
  schemas: {
    /** @description Update 'notification snooze until' date request */
    UpdateSnoozeUntilRequest: {
      /**
       * Format: date
       * @description Date to snooze notifications until
       * @example 2020-08-27
       */
      snoozeUntil: string
    }
    /** @description Update notification details for a user */
    UpdateNotificationDetailsRequest: {
      /**
       * @description Users email address
       * @example user@example.com
       */
      email: string
      /**
       * @description Users sms number
       * @example 07123456789
       */
      sms?: string
      /**
       * @description Preferred method of contact
       * @example EMAIL
       * @enum {string}
       */
      preference: 'EMAIL' | 'SMS' | 'NONE'
    }
    /** @description Shift details */
    DetailDto: {
      /**
       * @description The human readable activity
       * @example Internal Training
       */
      activity?: string
      /**
       * Format: date-time
       * @description The start of the detail
       */
      start: string
      /**
       * Format: date-time
       * @description The end of the detail
       */
      end: string
      /**
       * @description The type of the Shift the detail belongs to
       * @example OVERTIME
       * @enum {string}
       */
      parentType: 'SHIFT' | 'OVERTIME'
      /**
       * @description Hint for the UI on how to display this entity
       * @example NIGHT_FINISH
       * @enum {string}
       */
      displayType?:
        | 'DAY_START'
        | 'DAY_FINISH'
        | 'NIGHT_START'
        | 'NIGHT_FINISH'
        | 'OVERTIME_DAY_START'
        | 'OVERTIME_DAY_FINISH'
        | 'OVERTIME_NIGHT_START'
        | 'OVERTIME_NIGHT_FINISH'
      /**
       * Format: date-time
       * @description If there is a display type
       */
      displayTypeTime?: string
      /**
       * Format: int64
       * @description If the type is a 'finish' we include the duration of the whole shift in seconds
       * @example 54321
       */
      finishDuration?: number
    }
    /** @description Shift */
    ShiftDto: {
      /**
       * Format: date
       * @description The date of the shift
       * @example 2020-04-20
       */
      date: string
      /**
       * @description The type of the full day
       * @example ABSENCE
       * @enum {string}
       */
      fullDayType:
        | 'BREAK'
        | 'REST_DAY'
        | 'HOLIDAY'
        | 'ILLNESS'
        | 'ABSENCE'
        | 'TU_OFFICIALS_LEAVE_DAYS'
        | 'TU_OFFICIALS_LEAVE_HOURS'
        | 'SECONDMENT'
        | 'TOIL'
        | 'TRAINING_EXTERNAL'
        | 'TRAINING_INTERNAL'
        | 'NONE'
        | 'SHIFT'
      /**
       * @description The human readable type of the full day
       * @example Absence
       */
      fullDayTypeDescription: string
      /** @description A collection of details that make up the shift */
      details: components['schemas']['DetailDto'][]
    }
    /** @description User Preference */
    UserPreferenceDto: {
      /**
       * Format: date
       * @description Date to snooze notifications until
       * @example 2020-08-27
       */
      snoozeUntil?: string
      /**
       * @description User's Email Address
       * @example me@example.com
       */
      email?: string
      /**
       * @description User's SMS number
       * @example 0123567890
       */
      sms?: string
      /**
       * @description User's preferred method of communication
       * @example EMAIL
       * @enum {string}
       */
      preference?: 'EMAIL' | 'SMS' | 'NONE'
    }
    /** @description Notification */
    NotificationDto: {
      /**
       * @description Description of notification
       * @example Your shift on 2020-04-20 has changed.
       */
      description: string
      /**
       * Format: date-time
       * @description When the shift was modified
       */
      shiftModified: string
      /**
       * @description Whether the notification has been processed
       * @example true
       */
      processed: boolean
    }
  }
}

export interface operations {
  updateSnoozeNotification: {
    responses: {
      /** OK */
      200: unknown
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSnoozeUntilRequest']
      }
    }
  }
  updateNotificationDetails: {
    responses: {
      /** OK */
      200: unknown
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNotificationDetailsRequest']
      }
    }
  }
  getShifts: {
    parameters: {
      query: {
        from?: string
        to?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ShiftDto'][]
        }
      }
    }
  }
  getNotificationPreferences: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserPreferenceDto']
        }
      }
    }
  }
  getNotificationPreferences2: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserPreferenceDto']
        }
      }
    }
  }
  getNotifications: {
    parameters: {
      query: {
        processOnRead?: boolean
        unprocessedOnly?: boolean
        from?: string
        to?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['NotificationDto'][]
        }
      }
    }
  }
}
