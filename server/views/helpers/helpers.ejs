<%

/**
 * Split the string and return an Array ('2018-08-01' = ['2018', '08', '01'])
 * @param input
 * @param split
 * @returns {string[]}
 */
function splitString(input, split) {
  return input.toString().split(split);
}

convertSecondsToHms = (d) => {
  d = Number(d);
  var h = Math.floor(d / 3600);
  var m = Math.floor(d % 3600 / 60);
  var s = Math.floor(d % 3600 % 60);

  var hDisplay = h > 0 ? h + (h == 1 ? "hr " : "hrs ") : "";
  var mDisplay = m > 0 ? m + (m == 1 ? "min " : "mins ") : "";
  var sDisplay = s > 0 ? s + (s == 1 ? "sec" : " secs") : "";
  return hDisplay + mDisplay;
}

checkIfStartDateTimeBeforeEndDateTime = (startDateTime, endDateTime) => {
  var startTime = new Date(startDateTime);
  var endTime = new Date(endDateTime);

  if (startTime > endTime){
      return true;
  } else {
      return false;
  }
}

checkIfDateTimeIsNull = (dateTime) => {
  if (dateTime == "null"){
    return true;
  } else {
    return false;
  }
}

checkIfDateTimeIsNullOrUndefined = (dateTime) => {
  if (typeof dateTime == 'undefined' || !dateTime || dateTime.length === 0 || dateTime === ''){
    return true;
  } else {
    return false;
  }
}

getNextDate = (dateTime) => {
  var today = new Date(dateTime);
  var tomorrow = today.setDate(today.getDate()+1);

  return getDatePartFormatted(tomorrow);
}

getPreviousDate = (dateTime) => {
  var today = new Date(dateTime);
  var yesterday = today.setDate(today.getDate()-1);

  return getDatePartFormatted(yesterday);
}

getTimeFromDate = (dateTime) => {

  var date = new Date(dateTime);
  var hours = (date.getHours() < 10 ? "0" + date.getHours() : date.getHours());
  var minutes = (date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes());

  return hours + ":" + minutes;
}

getDayOfWeek = (date) => {
  var dayOfWeek = new Date(date).getDay();
  return isNaN(dayOfWeek) ? null : ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek];
}

getDatePartFormatted = (dateTime) => {
  return new Date(dateTime).getFullYear()+'-'+("0"+(new Date(dateTime).getMonth()+1)).slice(-2)+'-'+("0"+new Date(dateTime).getDate()).slice(-2)
}

/**
 * Array of days in same order as the view
 * @returns {string[]}
 */
getDays = () => {
  return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
}

/**
 * Take HH:MM and return HHhr MMmin
 * @param duration
 * @returns {string}
 */
parseDuration = (duration) => {
  const split = splitString(duration, ':'),
    hours = parseInt(split[0], 10),
    minutes = parseInt(split[1], 10);

  return (hours ? hours + 'hr ' : '') + (minutes ? minutes + 'min' : '');
}

/**
 * Take YYYY-MM-DD and return D
 * @param date
 * @returns {number}
 */
parseShortDate = (date) => {
  return parseInt(date.substr(date.length - 2), 10);
}

parseFullDateFormat = (date) => {
  var months    = ['January','February','March','April','May','June','July','August','September','October','November','December'];

  var formattedDate = new Date(date);

  var thisMonth = months[formattedDate.getMonth()];

  return formattedDate.getDate() + ' ' + thisMonth + ' ' + formattedDate.getFullYear();
}

/**
 * Get the next day
 * @param day
 * @returns {string}
 */
getNextDay = (day) => {
  const days = getDays();
  return days[days.indexOf(day) + 1] || days[0];
}

/**
 * Get the previous day
 * @param day
 * @returns {string}
 */
getPreviousDay = (day) => {
  const days = getDays();
  return days[days.indexOf(day) - 1] || days[days.length - 1];
}

/**
 * Gets the current month as a date string (YYYY-MM-DD)
 * @returns {string}
 */
getStartMonth = () => {
  const now = new Date();
  return [now.getFullYear(), ('0' + (now.getMonth() + 1)).slice(-2), '01'].join('-');
}

/**
 * Get the previous month (and year when applicable)
 * @param currentDate
 * @returns {string}
 */
getPreviousMonth = (currentDate) => {
  const splitDate = splitString(currentDate, '-'),
    newMonth = parseInt(splitDate[1], 10) - 1,
    currentYear = newMonth ? splitDate[0] : parseInt(splitDate[0], 10) - 1;

  return [currentYear, ('0' + (newMonth || 12)).slice(-2), '01'].join('-');
}

/**
 * Get the current month (and year when applicable)
 * @param currentDate
 * @returns {string}
 */
getCurrentMonth = (currentDate) => {
  const splitDate = splitString(currentDate, '-'),
    currentMonth = parseInt(splitDate[1], 10),
    currentYear = currentMonth ? splitDate[0] : parseInt(splitDate[0], 10);

  return [currentYear, ('0' + (currentMonth || 12)).slice(-2), '01'].join('-');
}

/**
 * Get the next month (and year when applicable)
 * @param currentDate
 * @returns {string}
 */
getNextMonth = (currentDate) => {
  const splitDate = splitString(currentDate, '-'),
    newMonth = parseInt(splitDate[1], 10) + 1,
    currentYear = newMonth < 13 ? splitDate[0] : parseInt(splitDate[0]) + 1;

  return [currentYear, ('0' + (newMonth < 13 ? newMonth : 1)).slice(-2), '01'].join('-');
}

/**
 * Get the current month name and year
 * @param currentDate
 * @returns {string}
 */
getMonthAndYear = (currentDate) => {
  const splitDate = splitString(currentDate, '-'),
    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  return months[parseInt(splitDate[1] - 1, 10)] + ' ' + splitDate[0];
}

getConvertedDateTime = (dateTimeInSeconds) => {

  return new Date(dateTimeInSeconds * 1000)
}

getDateTimeNowUTC = () => {

  var now = new Date();
  var utc_timestamp =  Date.UTC(now.getUTCFullYear(),now.getUTCMonth(), now.getUTCDate() ,
      now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds(), now.getUTCMilliseconds());
  return new Date(utc_timestamp);
}

getRelativeLastModifiedDateTime = (dateTimeInSeconds) => {

  var s = ( +getDateTimeNowUTC() - getConvertedDateTime(dateTimeInSeconds) ) / 1e3,
    m = s / 60,
    h = m / 60,
    d = h / 24,
    y = d / 365.242199,
    tmp;

  return ( tmp = Math.round(s) ) === 1 ? 'just now'
       : m < 1.01                      ? tmp + ' seconds ago'
       : ( tmp = Math.round(m) ) === 1 ? 'a minute ago'
       : h < 1.01                      ? tmp + ' minutes ago'
       : ( tmp = Math.round(h) ) === 1 ? 'an hour ago'
       : d < 1.01                      ? tmp + ' hours ago'
       : ( tmp = Math.round(d) ) === 1 ? 'yesterday'
       : y < 1.01                      ? tmp + ' days ago'
       : ( tmp = Math.round(y) ) === 1 ? 'a year ago'
       : tmp + ' years ago';
}

%>
